{"ast":null,"code":"import Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { styles } from \"../App\";\nimport { useQuery } from \"@apollo/client\";\nimport { COUNTRY_QUERY } from \"./gql/Query\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CountryItem = function CountryItem(_ref) {\n  var country = _ref.country;\n  var name = country.name,\n    code = country.code;\n  return _jsx(Pressable, {\n    style: styles.item,\n    children: _jsx(Text, {\n      style: styles.header,\n      children: name\n    })\n  });\n};\nexport default function CountriesScreen(props) {\n  var _useQuery = useQuery(COUNTRY_QUERY, {\n      variables: {\n        \"code\": props.code\n      }\n    }),\n    data = _useQuery.data,\n    loading = _useQuery.loading;\n  if (loading) {\n    return _jsx(Text, {\n      children: \"Fetching data...\"\n    });\n  }\n  return _jsx(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: props.modalVisible,\n    onRequestClose: function onRequestClose() {\n      props.setModalVisible(!props.modalVisible);\n    },\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.modalView,\n        children: [_jsx(FlatList, {\n          data: data.continent.countries,\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(CountryItem, {\n              country: item\n            });\n          },\n          keyExtractor: function keyExtractor(item, index) {\n            return index;\n          }\n        }), _jsx(Pressable, {\n          style: styles.button,\n          onPress: function onPress() {\n            return props.setModalVisible(!props.modalVisible);\n          },\n          children: _jsx(Text, {\n            style: styles.textStyle,\n            children: \"CLOSE\"\n          })\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["styles","useQuery","COUNTRY_QUERY","jsx","_jsx","jsxs","_jsxs","CountryItem","_ref","country","name","code","Pressable","style","item","children","Text","header","CountriesScreen","props","_useQuery","variables","data","loading","Modal","animationType","transparent","visible","modalVisible","onRequestClose","setModalVisible","View","container","modalView","FlatList","continent","countries","renderItem","_ref2","keyExtractor","index","button","onPress","textStyle"],"sources":["C:/Users/VAIO i7/Documents/VS Code/My Projects/firstReactNative/src/main/react-native-old/src/CountriesScreen.js"],"sourcesContent":["import { Text, FlatList, Pressable, Modal, View} from \"react-native\";\nimport { styles } from \"../App\";\nimport { useQuery } from \"@apollo/client\";\nimport { COUNTRY_QUERY } from \"./gql/Query\";\n\nconst CountryItem = ({ country }) => {\n  const { name, code } = country;\n  return (\n    <Pressable style={styles.item}>\n      <Text style={styles.header}>{name}</Text>\n    </Pressable>\n  );\n};\n\nexport default function CountriesScreen(props) {\n  const { data, loading } = useQuery(COUNTRY_QUERY, {\n    variables: {\n      \"code\": props.code,\n    },\n  });\n\n  if (loading) {\n    return <Text>Fetching data...</Text>;\n  }\n\n  return (\n    <Modal\n      animationType=\"slide\"\n      transparent={true}\n      visible={props.modalVisible}\n      onRequestClose={() => {\n        props.setModalVisible(!props.modalVisible);\n      }}\n    >\n      <View style={styles.container}>\n        <View style={styles.modalView}>\n          <FlatList\n            data={data.continent.countries}\n            renderItem={({ item }) => <CountryItem country={item} />}\n            keyExtractor={(item, index) => index}\n          />\n          <Pressable style={styles.button} onPress={() => props.setModalVisible(!props.modalVisible)}>\n            <Text style={styles.textStyle}>CLOSE</Text>\n          </Pressable>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n"],"mappings":";;;;;AACA,SAASA,MAAM;AACf,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,aAAa;AAAsB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE5C,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA,EAAoB;EAAA,IAAdC,OAAO,GAAAD,IAAA,CAAPC,OAAO;EAC5B,IAAQC,IAAI,GAAWD,OAAO,CAAtBC,IAAI;IAAEC,IAAI,GAAKF,OAAO,CAAhBE,IAAI;EAClB,OACEP,IAAA,CAACQ,SAAS;IAACC,KAAK,EAAEb,MAAM,CAACc,IAAK;IAAAC,QAAA,EAC5BX,IAAA,CAACY,IAAI;MAACH,KAAK,EAAEb,MAAM,CAACiB,MAAO;MAAAF,QAAA,EAAEL;IAAI;EAAQ,EAC/B;AAEhB,CAAC;AAED,eAAe,SAASQ,eAAeA,CAACC,KAAK,EAAE;EAC7C,IAAAC,SAAA,GAA0BnB,QAAQ,CAACC,aAAa,EAAE;MAChDmB,SAAS,EAAE;QACT,MAAM,EAAEF,KAAK,CAACR;MAChB;IACF,CAAC,CAAC;IAJMW,IAAI,GAAAF,SAAA,CAAJE,IAAI;IAAEC,OAAO,GAAAH,SAAA,CAAPG,OAAO;EAMrB,IAAIA,OAAO,EAAE;IACX,OAAOnB,IAAA,CAACY,IAAI;MAAAD,QAAA,EAAC;IAAgB,EAAO;EACtC;EAEA,OACEX,IAAA,CAACoB,KAAK;IACJC,aAAa,EAAC,OAAO;IACrBC,WAAW,EAAE,IAAK;IAClBC,OAAO,EAAER,KAAK,CAACS,YAAa;IAC5BC,cAAc,EAAE,SAAAA,eAAA,EAAM;MACpBV,KAAK,CAACW,eAAe,CAAC,CAACX,KAAK,CAACS,YAAY,CAAC;IAC5C,CAAE;IAAAb,QAAA,EAEFX,IAAA,CAAC2B,IAAI;MAAClB,KAAK,EAAEb,MAAM,CAACgC,SAAU;MAAAjB,QAAA,EAC5BT,KAAA,CAACyB,IAAI;QAAClB,KAAK,EAAEb,MAAM,CAACiC,SAAU;QAAAlB,QAAA,GAC5BX,IAAA,CAAC8B,QAAQ;UACPZ,IAAI,EAAEA,IAAI,CAACa,SAAS,CAACC,SAAU;UAC/BC,UAAU,EAAE,SAAAA,WAAAC,KAAA;YAAA,IAAGxB,IAAI,GAAAwB,KAAA,CAAJxB,IAAI;YAAA,OAAOV,IAAA,CAACG,WAAW;cAACE,OAAO,EAAEK;YAAK,EAAG;UAAA,CAAC;UACzDyB,YAAY,EAAE,SAAAA,aAACzB,IAAI,EAAE0B,KAAK;YAAA,OAAKA,KAAK;UAAA;QAAC,EACrC,EACFpC,IAAA,CAACQ,SAAS;UAACC,KAAK,EAAEb,MAAM,CAACyC,MAAO;UAACC,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMvB,KAAK,CAACW,eAAe,CAAC,CAACX,KAAK,CAACS,YAAY,CAAC;UAAA,CAAC;UAAAb,QAAA,EACzFX,IAAA,CAACY,IAAI;YAACH,KAAK,EAAEb,MAAM,CAAC2C,SAAU;YAAA5B,QAAA,EAAC;UAAK;QAAO,EACjC;MAAA;IACP;EACF,EACD;AAEZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}